library(foreach)
library(doParallel)
str(oper)
test=lapply(oper,function(x) do.call(pmax,c(x,na.rm=T)))
str(test)
test2=do.call(pmax,c(test,na.rm=T))
str(test2)
head(test2)
test=lapply(oper,function(x) do.call(pmax,c(x,na.rm=T)))
str(test)
str(oper)
do.call('[[',args=1)
do.call('[[',args=c(oper,1))
test=unlist(oper)
str(test)
test2=array(test,dim=c(3,2,2,237))
str(test2)
head(test2)
test2
lapply(oper,'[[',1)
test=lapply(oper,'[[',1)
str(test)
str(oper)
test2=do.call(pmax,args=c(test,na.rm=T))
str(test2)
test2
testing=oper[[1]]
str(testing)
str(oper)
length(oper)
length(oper[[1]])
str(swediff.reconmodel)
str(oper)
seq_len(oper)
seq_len(oper[[1]])
lapply(lapply(oper,'[['))
lapply(lapply(oper,'[['),'[[')
lapply(lapply(oper,'[['),'[[',1)
lapply(lapply(oper,'[[',1),'[[',1)
lapply(lapply(oper,'[[',1),'[[',2)
str(oper)
str(swediff.reconmodel)
source('xvalidated.drop1.xrecon.regression.skill-parallel.R')
quit()
quit()
??doMC
??doParallel
getParName()
getDoParName()
getDoParRegistered()
getDoParWorkers()
registerDoParallel(4)
getDoParWorkers()
getDoParName()
makeCluster(4)
library(doMC)
cl
getDoParName()
getDoParWorkers()
registerDoParallel(cl,cores=8)
getDoParWorkers()
valvec
str(oper)
str(oper1)
str(oper2)
yj
yj=2001001
str(oper1)
str(oper2)
split_dopar(oper2,1)
split_dopar(oper2,2)
str(oper)
test=oper[[2]]
str(test)
test2=test[[2]]
str(test2)
lapply(test2,function(x) which(!is.na(x)))
split_dopar(oper,1)
str(oepr)
str(oper)
split_dopar(oper,1)
str(oper)
lapply(oper,'[[',1)
str(lapply(oper,'[[',1) )
str(oper)
split_dopar(oper,1)
split_dopar(oper,1)
str(split_dopar(oper,1))
str(oper)
str(swediffpct.reconmodel)
which(!is.na(swediffpct.reconmodel))
swediff.reconmodel
?unlist
str(oper)
str(split_dopar(oper))
str(split_dopar(oper))
str(split_dopar(oper,1))
split_dopar(oper,1)
str(ope)
str(oper)
test=unlist(oper,recursive=F)
str(test)
test[[1]]
lapply(test,'[[',1)
split_dopar(oper,1)
load(file.path(fullpath,'cvdrop1.skillscores.xrecon.regression.gauss.snotellog.reconlog.RData'))
str(swediff.reconmodel)
str(swediff.reconmodel1)
all.equal(swediff.reconmodel,swediff.reconmodel1)
swediff.reconmodel[1,1,200:205]
swediff.reconmodel[1,1,,200:205]
swediff.reconmodel1[1,1,,200:205]
swediff.reconmodel[,1,,200:205]
swediff.reconmodel1[,1,,200:205]
str(oper)
oper[[1]][[2]]
oper[[1]][[2]][[2]]
registerDoMC(4)
registerDoParallel(2)
getDoParWorkers()
?makeSOCKCluster
?makeCluster
install.packages('boot')
?cv.glm
yj=2001002
ryr=2000
library(boot)
install.packages('boot')
library(boot)
quit()
quit()
library('ProjectTemplate')
#setwd('~/GoogleDrive/snotel-regression_project')
load.project()
library('ProjectTemplate')
#setwd('~/GoogleDrive/snotel-regression_project')
library(doMC)
load.project()
library('ProjectTemplate')
library(doMC)
load.project()
